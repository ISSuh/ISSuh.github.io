<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://issuh.github.io/</id><title>My Technical Diary</title><subtitle>A minimal, responsive, and powerful Jekyll theme for presenting professional writing.</subtitle> <updated>2024-07-08T21:44:13+09:00</updated> <author> <name>ISSuh</name> <uri>https://issuh.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://issuh.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://issuh.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator> <rights> © 2024 ISSuh </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Grokking Modern System Design - Load Balancer</title><link href="https://issuh.github.io/posts/educative-grokking-modern-system-design-04/" rel="alternate" type="text/html" title="Grokking Modern System Design - Load Balancer" /><published>2024-06-18T22:20:00+09:00</published> <updated>2024-06-18T22:20:00+09:00</updated> <id>https://issuh.github.io/posts/educative-grokking-modern-system-design-04/</id> <content src="https://issuh.github.io/posts/educative-grokking-modern-system-design-04/" /> <author> <name>ISSuh</name> </author> <category term="System Design" /> <category term="Grokking Modern System Design" /> <summary> Load Balancer 란 무엇인가? 로드 밸런서의 임무는 사용 가능한 서버 풀에서 모든 클라이언트의 요청을 공정하게 나누는 것이다. 로드 밸런서는 서버 과부하나 충돌을 방지하기 위해 이 작업을 수행한다. 로드 밸런싱 계층은 방화벽 다음으로 데이터 센터 내에서 첫 번째 접촉 지점이다. 서비스가 초당 수백 또는 수천 개의 요청을 처리하는 경우 로드 밸런서는 필요하지 않을 수 있다. 그러나 증가하는 클라이언트 요청을 위해 로드 밸런서는 다음 기능을 제공한다. 확장성 서버 추가를 통해 애플리케이션/서비스의 용량을 원활하게 늘릴 수 있게 함 가용성 일부 서버가 다운되거나 장애가 발생하더라도 시스템은 계속 사용 가능하게 함 ... </summary> </entry> <entry><title>Grokking Modern System Design - DNS</title><link href="https://issuh.github.io/posts/educative-grokking-modern-system-design-03/" rel="alternate" type="text/html" title="Grokking Modern System Design - DNS" /><published>2024-06-18T22:20:00+09:00</published> <updated>2024-06-18T22:20:00+09:00</updated> <id>https://issuh.github.io/posts/educative-grokking-modern-system-design-03/</id> <content src="https://issuh.github.io/posts/educative-grokking-modern-system-design-03/" /> <author> <name>ISSuh</name> </author> <category term="System Design" /> <category term="Grokking Modern System Design" /> <summary> DNS란 무엇인가? DNS(Domain Name System)는 인간에게 친숙한 도메인 이름을 기계가 읽을 수 있는 IP 주소에 매핑하는 인터넷의 이름 지정 서비스이다. 사용자가 브라우저에 도메인 이름을 입력하면 브라우저는 DNS 인프라에 요청하여 도메인 이름을 IP 주소로 변환해야 한다. 원하는 IP 주소를 얻으면 사용자의 요청이 대상 웹 서버로 전달된다. DNS에 대한 몇 가지 중요한 세부 사항은 아래와 같다. 이름 서버 DNS는 단일 서버가 아닌 수많은 서버를 갖춘 완벽한 인프라이며, 사용자의 쿼리에 응답하는 DNS 서버를 네임서버라고 함 리소스 레코드 DNS 데이터베이스는 도메인 이름과 IP 주소 매핑을 리소스 레코드(RR)... </summary> </entry> <entry><title>Grokking Modern System Design - 비기능적 시스템 특성</title><link href="https://issuh.github.io/posts/educative-grokking-modern-system-design-02/" rel="alternate" type="text/html" title="Grokking Modern System Design - 비기능적 시스템 특성" /><published>2024-06-18T22:10:00+09:00</published> <updated>2024-06-18T22:10:00+09:00</updated> <id>https://issuh.github.io/posts/educative-grokking-modern-system-design-02/</id> <content src="https://issuh.github.io/posts/educative-grokking-modern-system-design-02/" /> <author> <name>ISSuh</name> </author> <category term="System Design" /> <category term="Grokking Modern System Design" /> <summary> 가용성이란 무엇인가? 가용성은 클라이언트가 일부 서비스나 인프라에 액세스할 수 있고 정상적인 조건에서 작동되는 시간의 비율이다. 예를 들어, 서비스 가용성이 100% 라면 해당 서비스가 항상 의도한 대로 작동하고 응답(정상적으로 작동)한다는 의미이다. 가용성 측정 수학적으로 가용성 $A$ 는 비율이다. $A$ 값이 높을수록 좋으며 이는 공식으로 나타낼 수 있다. $A = (총 시간 - 시스템이 멈춘 시간)/총시간 * 100$ 일반적으로 가용성을 9의 숫자로 측정한다. 다음 표는 주어진 숫자 9를 사용할 때 허용되는 가동 중지 시간이다. 가용성(%) 연간 가동 중지 시간 월별 가동 중지 시간 주당 가동 중지 시간 ... </summary> </entry> <entry><title>Grokking Modern System Design - 추상화</title><link href="https://issuh.github.io/posts/educative-grokking-modern-system-design-01/" rel="alternate" type="text/html" title="Grokking Modern System Design - 추상화" /><published>2024-06-18T21:40:00+09:00</published> <updated>2024-06-18T21:40:00+09:00</updated> <id>https://issuh.github.io/posts/educative-grokking-modern-system-design-01/</id> <content src="https://issuh.github.io/posts/educative-grokking-modern-system-design-01/" /> <author> <name>ISSuh</name> </author> <category term="System Design" /> <category term="Grokking Modern System Design" /> <summary> 추상화란 무엇인가? 추상화는 필요하지 않은 세부 사항을 난독화 하는 기술이다. 츠상화는 내면의 복잡성을 숨겨서 우리가 설정한 목표에 대해 더 폭넓게 이해하고 그에 집중할 수 있게 해주기 때문에 매우 중요하다 데이터베이스 추상화 트랜잭션은 동시 사용자가 데이터를 읽거나 쓰거나 변경할 때 문제가 되는 많은 결과를 숨기고 성공할 경우 커밋하고 실패할 경우 중단하는 간단한 인터페이스를 제공하는 데이터베이스 추상화이다. 어느 쪽이든 데이터는 하나의 일관된 상태에서 새로운 일관된 상태로 이동한다. 트랜잭션을 통해 최종 사용자는 동시 데이터 변경의 미묘한 코너 케이스로 인해 꼼짝 못하게 되는 것이 아니라 비즈니스 논리에 집중할 수 있다. 분산 시스템의 추상화 분산 시스템의 추상화는 엔지니어가 작업을 단순화... </summary> </entry> <entry><title>Distributed Systems - Sharing Problems and their Solution</title><link href="https://issuh.github.io/posts/educative-distributed-system-12/" rel="alternate" type="text/html" title="Distributed Systems - Sharing Problems and their Solution" /><published>2024-06-17T22:40:00+09:00</published> <updated>2024-06-17T22:40:00+09:00</updated> <id>https://issuh.github.io/posts/educative-distributed-system-12/</id> <content src="https://issuh.github.io/posts/educative-distributed-system-12/" /> <author> <name>ISSuh</name> </author> <category term="System Design" /> <category term="Distributed Systems" /> <summary> 공유의 문제점 공유는 고 가용성, 성능, 확장성을 저해하는 주요 요인 중 하나이다. 예를 들어, 다양한 파티션이 독립적인 오류 모드를 가질 수 있으므로 파티셔닝을 통해 공유를 줄여 시스템의 전체 가용성을 높일 수 있다. 그리고 단일 데이터 항목을 볼 땐 복제를 통해 공유를 늘려 가용성을 높일 수 있다. 공유 줄이기 공유를 줄이는 것은 적절하게 적용하면 매우 유익할 수 있다. 일부 시스템 아키텍처는 모든 요청이 시스템의 단일 노드 또는 단일 노드 그룹에 의해 독립적으로 처리될 수 있도록 조정과 경합을 줄이기 위해 이 원칙을 극단적으로 따른다. 이를 일반적으로 비공유 아키텍처라고 합니다. 시스템의 상태 저장과 상태 비저장 부분 분해 공유를 줄이기 위해 기본적이고 널리 사용되는 기술은 시스템의... </summary> </entry> </feed>
